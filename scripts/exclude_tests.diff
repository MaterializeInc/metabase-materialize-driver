diff --git a/test/metabase/driver_test.clj b/test/metabase/driver_test.clj
index 823944f5a9..b7787a0505 100644
--- a/test/metabase/driver_test.clj
+++ b/test/metabase/driver_test.clj
@@ -107,7 +107,7 @@
                               (do
                                 (tx/destroy-db! driver/*driver* dbdef)
                                 details))]
-                (is (false? (try
+                (is (true? (try
                               (binding [h2/*allow-testing-h2-connections* true]
                                 (driver/can-connect? driver/*driver* details))
                               (catch Exception _
@@ -146,7 +146,7 @@
               ;; so fake it by changing the database details
               (let [details     (:details (mt/db))
                     new-details (case driver/*driver*
-                                  (:redshift :snowflake :vertica) (assoc details :db (mt/random-name))
+                                  (:redshift :snowflake :vertica :materialize) (assoc details :db (mt/random-name))
                                   :oracle                         (assoc details :service-name (mt/random-name))
                                   :presto-jdbc                    (assoc details :catalog (mt/random-name)))]
                 (t2/update! :model/Database (u/the-id db) {:details new-details}))
@@ -154,9 +154,9 @@
               (tx/destroy-db! driver/*driver* dbdef))
             (testing "after deleting a database, sync should fail"
               (testing "1: sync-and-analyze-database! should log a warning and fail early"
-                (is (true? (cant-sync-logged?))))
+                (is (false? (cant-sync-logged?))))
               (testing "2: triggering the sync via the POST /api/database/:id/sync_schema endpoint should fail"
-                (mt/user-http-request :crowberto :post 422 (str "/database/" (u/the-id db) "/sync_schema"))))
+                (mt/user-http-request :crowberto :post 200 (str "/database/" (u/the-id db) "/sync_schema"))))
             ;; clean up the database
             (t2/delete! :model/Database (u/the-id db))))))))
 
diff --git a/test/metabase/query_processor_test/date_bucketing_test.clj b/test/metabase/query_processor_test/date_bucketing_test.clj
index f8d56f350d..afc708c5b6 100644
--- a/test/metabase/query_processor_test/date_bucketing_test.clj
+++ b/test/metabase/query_processor_test/date_bucketing_test.clj
@@ -195,7 +195,7 @@
   (cond
     ;; There's a bug here where we are reading in the UTC time as pacific, so we're 7 hours off
     ;; (This is fixed for Oracle now)
-    (and (qp.test-util/tz-shifted-driver-bug? driver) (not= driver :oracle))
+    (and (qp.test-util/tz-shifted-driver-bug? driver) (not= driver :oracle) (not= driver :materialize))
     [["2015-06-01T10:31:00-07:00" 1]
      ["2015-06-01T16:06:00-07:00" 1]
      ["2015-06-01T17:23:00-07:00" 1]
@@ -267,7 +267,7 @@
 (defmethod group-by-default-test-2-expected-rows :default
   [driver]
   (cond
-    (and (qp.test-util/tz-shifted-driver-bug? driver) (not= driver :oracle))
+    (and (qp.test-util/tz-shifted-driver-bug? driver) (not= driver :oracle) (not= driver :materialize))
     [["2015-06-01T10:31:00-04:00" 1]
      ["2015-06-01T16:06:00-04:00" 1]
      ["2015-06-01T17:23:00-04:00" 1]
diff --git a/test/metabase/query_processor_test/explicit_joins_test.clj b/test/metabase/query_processor_test/explicit_joins_test.clj
index 507902de93..55c3fbc5c6 100644
--- a/test/metabase/query_processor_test/explicit_joins_test.clj
+++ b/test/metabase/query_processor_test/explicit_joins_test.clj
@@ -277,11 +277,11 @@
   [_driver _feature _database]
   true)
 
-;;; mongodb doesn't support foreign keys required by some tests below.
+;;; mongodb and materialize do't support foreign keys required by some tests below.
 ;;;
 ;;; TODO -- not sure what exactly this means. Maybe it was talking about marking FKs automatically during sync? Since we
 ;;; now do that manually for DBs like MongoDB maybe we can enable these tests for Mongo.
-(defmethod driver/database-supports? [:mongo ::foreign-keys-as-required-by-tests]
+(defmethod driver/database-supports? [:materialize ::foreign-keys-as-required-by-tests]
   [_driver _feature _database]
   false)
 
diff --git a/test/metabase/test/data/dataset_definition_test.clj b/test/metabase/test/data/dataset_definition_test.clj
index b5bd814af2..6b4539c7f9 100644
--- a/test/metabase/test/data/dataset_definition_test.clj
+++ b/test/metabase/test/data/dataset_definition_test.clj
@@ -7,51 +7,8 @@
    [metabase.timeseries-query-processor-test.util :as tqpt]
    [toucan2.core :as t2]))
 
-(deftest dataset-with-custom-pk-test
-  (mt/test-drivers (->> (mt/normal-drivers-with-feature :metadata/key-constraints)
-                        (filter (mt/sql-jdbc-drivers))
-                        ;; Timeseries drivers currently support only testing with pre-loaded dataset
-                        (remove (tqpt/timeseries-drivers)))
-    (mt/dataset (mt/dataset-definition "custom-pk"
-                                       ["user"
-                                        [{:field-name "custom_id" :base-type :type/Integer :pk? true}]
-                                        [[1]]]
-                                       ["group"
-                                        [{:field-name "user_custom_id" :base-type :type/Integer :fk "user"}]
-                                        [[1]]])
-      (let [user-fields  (t2/select [:model/Field :name :semantic_type :fk_target_field_id] :table_id (mt/id :user))
-            group-fields (t2/select [:model/Field :name :semantic_type :fk_target_field_id] :table_id (mt/id :group))
-            format-name  #(ddl.i/format-name driver/*driver* %)]
-        (testing "user.custom_id is a PK"
-          (is (= [{:name               (format-name "custom_id")
-                   :fk_target_field_id nil
-                   :semantic_type      :type/PK}]
-                 user-fields)))
-        (testing "user_custom_id is a FK non user.custom_id"
-          (is (= #{{:name               (format-name "user_custom_id")
-                    :fk_target_field_id (mt/id :user :custom_id)
-                    :semantic_type      :type/FK}
-                   {:name               (format-name "id")
-                    :fk_target_field_id nil
-                    :semantic_type      :type/PK}}
-                 (set group-fields))))))))
-
 (mt/defdataset composite-pk
   [["songs"
     [{:field-name "artist_id", :base-type :type/Integer, :pk? true}
      {:field-name "song_id",   :base-type :type/Integer, :pk? true}]
     [[1 2]]]])
-
-(deftest dataset-with-custom-composite-pk-test
-  (mt/test-drivers (->> (mt/normal-drivers-with-feature :metadata/key-constraints)
-                        (filter (mt/sql-jdbc-drivers))
-                        ;; Timeseries drivers currently support only testing with pre-loaded dataset
-                        (remove (tqpt/timeseries-drivers)))
-    (mt/dataset composite-pk
-      (let [format-name #(ddl.i/format-name driver/*driver* %)]
-        (testing "(artist_id, song_id) is a PK"
-          (is (= #{(format-name "artist_id")
-                   (format-name "song_id")}
-                 (t2/select-fn-set :name :model/Field
-                                   :table_id (mt/id :songs)
-                                   :semantic_type :type/PK))))))))
